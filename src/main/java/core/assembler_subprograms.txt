Co powinno się dziać przy odwiedzaniu poszczególnych nieterminali?

Identifier - ma zapisać adres zmiennej ACC
Value - ma zapisać wartość do ACC
Condition - ma zapisać wartość boolowską do ACC (0 (może ujemna?), gdy warunek spełniony, dodatnia liczba w przeciwnym razie)
Expression - ma zapisać wartość do ACC
Declaration - dodaje do pamięci (w Javie)
Command - wykonuje operacje


// UWAGA: nie opisuję operacji wykonywanych w Javie, tylko assembler

Identifier: NADPISUJE REJESTRY: ACC, TMP1

    a) VarIdentifier NADPISUJE REJESTRY: ACC, TMP1

        generateConstant(&var)

    b) ArrConstIdentifier NADPISUJE REJESTRY: ACC, TMP1

        generateConstant(&var)

    c) ArrVarIdentifier -  NADPISUJE REJESTRY: ACC, TMP1

        generateConstant(&arr(0)) # zapisujesz adres początku tablicy
        STORE TMP1 # zapisujesz tymczasowo
        LOAD &varIndex # wczytujesz wartość indeksu
        ADD TMP1 # dodajesz adres początku tablicy


Value: NADPISUJE REJESTRY: ACC, TMP1

    a) NumValue  NADPISUJE REJESTRY: ACC, TMP1

        generateConstant(val)

    b) IdentValue NADPISUJE REJESTRY: ACC, TMP1

        ## uruchom ident ##
        LOADI ACC

Condition: NADPISUJE REJESTRY: ACC, TMP1, TMP2

    a) EqCondition  NADPISUJE REJESTRY: ACC, TMP1, TMP2

        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JZERO set
            SUB 0
        JUMP outside
    set:    INC
    outside:

    b) NeqCondition  NADPISUJE REJESTRY: ACC, TMP1, TMP2

        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JZERO outside
            LOAD ONE
    outside:

    c) LeCondition NADPISUJE REJESTRY: ACC, TMP1, TMP2

        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JNEG set
            SUB 0
        JUMP outside
    set:    LOAD ONE
    outside:

    d) GeCondition NADPISUJE REJESTRY: ACC, TMP1, TMP2
        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JPOS set
            SUB 0
        JUMP outside
    set:    LOAD ONE
    outside:

    e) LeqCondition NADPISUJE REJESTRY: ACC, TMP1, TMP2
        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JPOS set
            LOAD ONE
        JUMP outside
    set:    SUB 0
    outside:

     f) GeqCondition NADPISUJE REJESTRY: ACC, TMP1, TMP2
        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2
        JNEG set
            INC # zamiast SUB 0 (jak będzie zero, to INC zrobi jedynkę)
        JUMP outside
     set:   SUB 0
     outside:

Expression: NADPISUJE REJESTRY: ACC, TMP1, TMP2
    a) ValueExpression NADPISUJE REJESTRY: ACC, TMP1

        ## uruchom value ##

    b) AddExpression NADPISUJE REJESTRY: ACC, TMP1, TMP2

        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        ADD TMP2

    c) SubExpression NADPISUJE REJESTRY: ACC, TMP1, TMP2

        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##
        SUB TMP2

    d) MulExpression NADPISUJE REJESTRY: ACC, TMP1, TMP2, MUL1, MUL2
        // geeksforgeeks.org/multiplication-two-numbers-shift-operator/
        ## uruchom value2 ##
        STORE TMP2
        ## uruchom value1 ##

        JUMP cond

cntnt:  STORE TMP2
        LOAD TMP1
        ADD ACC

cond:   STORE TMP1
        LOAD TMP2
        DEC
        JPOS cntnt

        LOAD TMP1

        while( tmp2 > 0) add ACC; STORE TMP1; LOAD TMP2; DEC; STORE TMP2; LOAD TMP1;

    e) DivExpression NADPISUJE REJESTRY: ACC, TMP1, TMP2, MUL1, MUL2, MUL3
        Algorytm:
        dzielenie pisemne na binarce
        Najpierw wyznaczamy count - zmienną, która mówi ile maksymalnie razy jesteśmy w stanie
        zrobić shifta na dzielniku, żeby nie przekroczyć dzielnej.
        Potem w pętli od count do 0 (iterator i)
            - sprawdzamy, czy od a można odjąć b przesunięte o i
            jeśli tak, to to robimy, a do wyniku dodajemy jedynkę i go przesuwamy
            jeśli nie, to nie odejmujemy, jedynie przesuwamy wynik
        Na końcu trzeba tylko cofnąć shifta po ostatnim obiegu, żeby dostać prawidłowy wynik

        Pseudokod:

        zmienne: a, b, count = 0, wynik = 0

        if b == 0 {
            a == 0
            wynik == 0
            EXIT
        }

        while( (b << count) <= a ) {
            count++;
        }
        count--;

        for i from count downto 0 {
            if((b << i) <= a) { // a >= (b << i)
                a -= b << i;
                wynik++;
                wynik = wynik << 1;
            } else {
                wynik = wynik << 1;
            }
        }

        wynik = wynik >> 1; // napraw po ostatnim shifcie

        return wynik

        Assembler:
            /*  a - TMP1
                b - TMP2
                count and i - MUL1
                wynik - MUL2
                temp - MUL3
            */


            // ustaw count i wynik na zero

            LOAD TMP2
            JZERO divzero

            JPOS bsgncntnt
            STORE DIV2 // wrzucasz b na chwilę
            SUB 0
            SUB DIV2 // negacja b
            STORE TMP2
            LOAD MINUSONE
            STORE DIV2
            JUMP outbsgn
bsgncntnt:  LOAD ONE
            STORE DIV2
outbsgn:

            LOAD TMP1
            JPOS asgncntnt
            STORE DIV1 // wrzucasz a na chwilę
            SUB 0
            SUB DIV1 // negacja a
            STORE TMP1
            LOAD MINUSONE
            STORE DIV1
            JUMP outasgn
asgncntnt:  LOAD ONE
            STORE DIV1
outasgn:




            JUMP whilecnd
whilecntnt: INC
            LOAD MUL1
            INC
            STORE MUL1
whilecnd:  LOAD TMP2
            SHIFT MUL1
            SUB TMP1
            DEC
            JNEG whilecntnt


            LOAD MUL1
            DEC
            STORE MUL1 // od teraz to już jest i, nie count
            JUMP forcnd
forcntnt:   LOAD TMP2
            SHIFT MUL1
            STORE MUL3
            LOAD TMP1
            SUB MUL3
            INC
            JPOS ifcntnt
            DEC
            LOAD MUL2
            SHIFT ONE
            STORE MUL2
            JUMP ifout
ifcntnt:    DEC
            STORE TMP1
            LOAD MUL2
            INC
            SHIFT ONE
            STORE MUL2
ifout:      LOAD MUL1
            DEC
            STORE MUL1

forcnd:     INC
            JPOS forcntnt

            LOAD MUL2
            SHIFT MINUSONE
            STORE MUL2

            LOAD DIV1
            JPOS div1poscntnt
            /**
                zewnętrzny else, a < 0 // TODO: a może być równe 0 (chyba naprawione)

                LOAD DIV2
                JPOS div2poscntnt2
                /**
                    wewnętrzny else, a < 0 && b < 0
                 **/
                JUMP div2out2
    div2poscntnt2: /**
                    wewnętrzny if, a < 0 && b > 0
                **/
    div2out2:

            **/
            JUMP div1out
div1poscntnt: /**
                zewnętrzny if, a > 0

                LOAD DIV2
                JPOS div2poscntnt1
                /**
                    wewnętrzny else, a > 0 && b < 0
                **/
                JUMP div2out1
  div2poscntnt1: /**
                    wewnętrzny if, a > 0 && b > 0
                **/
  div2out1:

            **/
div1out:



            JUMP outdivzero
divzero:    STORE(TMP1) // zapisujesz zero do tmp1 i tmp, jeśli tu jesteś, to 0 na pewno jest w ACC
            STORE(MUL2)
outdivzero:

    f) ModExpression // jeśli będzie potrzebował nowych rejestrów, to po prostu będzie się nazywać MOD
        to samo, co w div, tylko return a na końcu

Command: NADPISUJE REJESTRY: wszystkie rejestry komend

    a) AssignCommand NADPISUJE REJESTRY: ACC, TMP1, TMP2, TMP3

        ## uruchom identifier ##
        STORE TMP3
        ## uruchom expression ##
        STOREI TMP3

    b) IfElseCommand NADPISUJE REJESTRY: wszystkie rejestry komend

        ## uruchom condition ##
        JPOS cntnt
        ## uruchom każdą else command ##
        JUMP outside
cntnt:  ## uruchom każdą if command ##
outside:

    c) IfCommand NADPISUJE REJESTRY: wszystkie rejestry komend

        ## uruchom condition ##
        JPOS cntnt
        JUMP outside
cntnt:  ## uruchom każdą if command ##
outside:

    d) WhileCommand NADPISUJE REJESTRY: wszystkie rejestry komend

        JUMP cond
cntnt:  ## uruchom każdą command ##
cond:   ## uruchom condition ##
        JPOS cntnt

    e) DoWhileCommand NADPISUJE REJESTRY: wszystkie rejestry komend

cntnt: ## uruchom każdą command ##
       ## uruchom condition ##
       JPOS cntnt

    f) ForToCommand NADPISUJE REJESTRY: wszystkie rejestry komend

    /*
        Wcześniej przejdź przez wszystkie for'y i dla każdego iteratora dodaj go do mapy w Memory i zarezerwuj dwa miejsca (początek i koniec).
        Jeśli nazwy iteratorów się powtarzają, to je nadpisz (dwie niezależne pętle, więc czemu nie - w zagnieżdżonych muszą być inne nazwy).
    */

       // znajdź indeks iteratora w Memory
       ## uruchom value2 ##
       STORE &iterator+1 // zapamiętujesz koniec tablicy
       ## uruchom value1 ##
       STORE &iterator // zapamiętujesz początek
       // w akumulatorze masz nadal początek pętli

       JUMP cond

cntnt: INC // trik, zamiast JNEG my chcemy JNEG + JZERO (gdy iterator jest równy końcowi pętli, to powinna się ona wykonać)
           // dlatego przez JNEG odejmujemy jedynkę, a po skoku ją dodajemy
           // później: "INC chyba zbędne, i tak nadpisujemy akumulator"
       ## uruchom każdą command ##

       LOAD &iterator
       INC
       STORE &iterator

cond:  SUB &iterator+1
       DEC

       JNEG cntnt

    g) ForDownToCommand NADPISUJE REJESTRY: wszystkie rejestry komend

           ## uruchom value2 ##
           STORE &iterator+1
           ## uruchom value1 ##
           STORE &iterator

           JUMP cond

    cntnt: DEC
           ## uruchom każdą command ##

           LOAD &iterator
           DEC
           STORE &iterator

    cond:  SUB &iterator+1
           INC

           JPOS cntnt

    h) ReadCommand NADPISUJE REJESTRY: ACC, TMP1

           ## uruchom identifier ##
           STORE TMP1
           GET
           STOREI TMP1

    i) WriteCommand NADPISUJE REJESTRY: ACC, TMP1
           ## uruchom value ##
           PUT



Dodatkowe operacje:
generateConstant(const) - umieszcza wartość stałej const (np. 7) w ACC, NADPISUJE REJESTRY: ACC, TMP1
setOneRegister() - generuje wartość 1 i umieszcza w specjalnym rejestrze ONE

generateConstant(const) { // TODO: zostało zmienione, opisz zmiany
    LOAD ONE
    SHIFT ONE # mnóż ACC przez 2^1 tak długo, aż przekroczysz stałą (w Javie)
    .
    .
    .
    SHIFT ONE

    DEC # po tym, jak przekroczyłeś, odejmuj
    .
    .
    .
    DEC

}

setOneRegister() {
    SUB 0
    INC
    STORE ONE
}

Etykiety - ponieważ nie zawsze wiemy, ile linii zostanie wygenerowanych, wprowadzamy etykiety, które w postprocessingu
usuwamy i zastępujemy