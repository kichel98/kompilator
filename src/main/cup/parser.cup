package cup11b;

/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import syntax.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.ArrayList;
import java.util.List;
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    public void syntax_error(Symbol cur_token){
        ComplexSymbol cur_token_obj = (ComplexSymbol) cur_token;
        System.err.println("CUP: Syntax error: left " + cur_token_obj.xleft + ", right " + cur_token_obj.xright);
    }

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal            DECLARE, BEGIN, END, ASSIGN, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE, ENDDO, FOR, FROM,
                    TO, DOWNTO, ENDFOR, READ, WRITE, PLUS, MINUS, TIMES, DIV, MOD, LPAR, RPAR, COLON, SEMICOLON, COMMA;
terminal String     pidentifier;
terminal Integer    num;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
non terminal Program            program;
non terminal List<Declaration>  declarations;
non terminal List<Command>      commands;
non terminal Command            command;
non terminal Expression         expression;
//non terminal Condition          condition;
non terminal Value              value;
non terminal Identifier         identifier;


/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
   
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE; 
*/


/* ----------------------------Grammar Section-------------------- */
program ::= DECLARE declarations:decllist BEGIN commands:cmdlist END    {: RESULT = new Program(decllist, cmdlist); :}
    | BEGIN commands:cmdlist END                                        {: RESULT = new Program(cmdlist); :}
    ;
declarations ::= declarations:decllist COMMA pidentifier:id             {: decllist.add(new VarDeclaration(id)); RESULT = decllist; :}
    | pidentifier:id                                                    {: List<Declaration> list = new ArrayList<Declaration>(); list.add(new VarDeclaration(id)); RESULT = list; :}
    ;
commands ::= commands:cmdlist command:cmd                               {: cmdlist.add(cmd); RESULT = cmdlist; :}
    | command:cmd                                                       {: List<Command> list = new ArrayList<Command>(); list.add(cmd); RESULT = list; :}
    ;
command ::= READ identifier:id SEMICOLON                                {: RESULT = new ReadCommand(id); :}
    | WRITE value:val SEMICOLON                                         {: RESULT = new WriteCommand(val); :}
    ;
expression ::= value:val                                                {: RESULT = new ValueExpression(val); :}
    ;
value ::= num:num                                                       {: RESULT = new NumValue(num); :}
    | identifier:id                                                     {: RESULT = new IdentValue(id); :}
    ;
identifier ::= pidentifier:pid                                          {: RESULT = new VarIdentifier(pid); :}
    ;
